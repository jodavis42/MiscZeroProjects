//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 DigiPen USA Corporation, All Rights Reserved
// Author: Zero Engine Team
// Last updated by: Arend Danielek
// Last update: 7/24/2016
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

class FadeInEvent : ZilchEvent
{
  sends FadeInEvent : FadeInEvent;
  var Dur : Real = -1.0;
}

class FadeOutEvent : ZilchEvent
{
  sends FadeOutEvent : FadeOutEvent;
  var Dur : Real = -1.0;
}

class SpriteFadedIn : ZilchEvent
{
  sends SpriteFadedIn : SpriteFadedIn;
}

class SpriteFadedOut : ZilchEvent
{
  sends SpriteFadedOut : SpriteFadedOut;
}

// Interpolates the color value of a sprite from a start value to another and back again.
class SpriteFader : ZilchComponent
{
  [Dependency]
  var Sprite : Sprite;
  
  // Duration of the fading sequences
  [Property]
  var FadeInDuration : Real = 1.0;
  
  [Property]
  var FadeOutDuration : Real = 1.0;
  
  // Ease functions to be used for the interpolation of the Sprite's alpha value
  [Property]
  var FadeInEase : Ease = Ease.Linear;
  
  [Property]
  var FadeOutEase : Ease = Ease.Linear;
  
  [Property]
  var FadeInOnLevelStarted : Boolean = true;
  
  [Property]
  var FadeInTarget : Real4 = Real4(0,0,0,0);
  
  [Property]
  var FadeOutTarget : Real4 = Real4(0,0,0,1);
  
  // Should this sprite fade out automatically after a delay after fading in
  [Property]
  var AutoFadeOut : Boolean = false;
  
  [Property]
  var AutoFadeOutDelay : Real = 3.0;
  
  var FadeSequence : ActionSet;
  
  function Initialize(init : CogInitializer)
  {
    if(this.FadeInOnLevelStarted)
      Zero.Connect(this.Space, Events.LevelStarted, this.OnLevelStarted);
    
    Zero.Connect(this.Space, Events.FadeInEvent, this.OnFadeInEvent);
    Zero.Connect(this.Space, Events.FadeOutEvent, this.OnFadeOutEvent);
  }
  
  function OnLevelStarted(event : GameEvent)
  {
    this.Space.DispatchEvent(Events.FadeInEvent, FadeInEvent());
  }
  
  function OnFadeInEvent(event : FadeInEvent)
  {
    this.FadeIn();
  }
  
  function FadeIn()
  {
    // If there is already a fade sequence running cancel it
    if(this.FadeSequence != null)
        this.FadeSequence.Cancel();
    
    // Interpolate the sprite color to the original color
    this.FadeSequence = Actions.Sequence(this.Owner.Actions);
    Actions.Property(this.FadeSequence, @this.Sprite.VertexColor, this.FadeInTarget, this.FadeInDuration, this.FadeInEase);
    Actions.Call(this.FadeSequence, this.DispatchFadedIn);
    
    // If the sprite should auto fade out then add it to the sequence which is fading it in
    if(this.AutoFadeOut)
    {
      Actions.Delay(this.FadeSequence, this.AutoFadeOutDelay);
      Actions.Call(this.FadeSequence, this.FadeOut);
    }
  }

  function OnFadeOutEvent(event : FadeOutEvent)
  {
    this.FadeOut();
  }
  
  function FadeOut()
  {
    // If there is already a fade sequence running cancel it
    if(this.FadeSequence != null)
      this.FadeSequence.Cancel();
    
    // Interpolate the sprite color to the FadeColor
    this.FadeSequence = Actions.Sequence(this.Owner.Actions);
    Actions.Property(this.FadeSequence, @this.Sprite.VertexColor, this.FadeOutTarget, this.FadeOutDuration, this.FadeOutEase);
    Actions.Call(this.FadeSequence, this.DispatchFadedOut);
  }
  
  function DispatchFadedIn()
  {
    this.Owner.DispatchEvent(Events.SpriteFadedIn, ZilchEvent());
  }
  
  function DispatchFadedOut()
  {
    this.Owner.DispatchEvent(Events.SpriteFadedOut, ZilchEvent());
  }
}

struct Dingus
{
  [Static] function GetMath() : Real
  {
    return 1.3;
  }
}

// PostProcess fragments are intended to be constructed in script
// and passed directly to the AddRenderTaskPostProcess method.
[Pixel][PostProcess]
struct PostFxaa
{
  [StageInput] var Uv : Real2;
  [Input] var Texture : Sampler2d;
  [Input] var InverseViewportSize : Real2;

  [Output] var Target0 : Real4;
  
  var Luma : Real3 = Real3(0.299, 0.587, 0.114);
  var FxaaSpanMax : Real = 8.0;
  var FxaaReduceMin : Real = 1.0 / 128.0;
  var FxaaReduceMul : Real = 1.0 / 8.0;
  
  function Main()
  {
    // Sample around the current pixel
    var rgbNW = this.Texture.Sample(this.Uv + (Real2(-1.0, -1.0) * this.InverseViewportSize)).XYZ;
    var rgbNE = this.Texture.Sample(this.Uv + (Real2(+1.0, -1.0) * this.InverseViewportSize)).XYZ;
    var rgbSW = this.Texture.Sample(this.Uv + (Real2(-1.0, +1.0) * this.InverseViewportSize)).XYZ;
    var rgbSE = this.Texture.Sample(this.Uv + (Real2(+1.0, +1.0) * this.InverseViewportSize)).XYZ;
    var rgbM  = this.Texture.Sample(this.Uv).XYZ;
    
    // Calculate luminance for each pixel
    var lumaNW = Math.Dot(rgbNW, this.Luma);
    var lumaNE = Math.Dot(rgbNE, this.Luma);
    var lumaSW = Math.Dot(rgbSW, this.Luma);
    var lumaSE = Math.Dot(rgbSE, this.Luma);
    var lumaM  = Math.Dot(rgbM,  this.Luma);
    
    // Blur direction
    var blurDir = Real2();
    blurDir.X = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    blurDir.Y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
    
    // Used to not divide by 0
    var cornerLuma = (lumaNW + lumaNE + lumaSW + lumaSE);
    var dirReduce = Math.Max(cornerLuma * (0.25 * this.FxaaReduceMul), this.FxaaReduceMin);
    
    var rcpDirMin = 1.0 / (Math.Min(Math.Abs(blurDir.X), Math.Abs(blurDir.Y)) + dirReduce);
    
    blurDir = Math.Min(Real2( this.FxaaSpanMax,  this.FxaaSpanMax), 
              Math.Max(Real2(-this.FxaaSpanMax, -this.FxaaSpanMax), blurDir * rcpDirMin)) * this.InverseViewportSize;
        
    var sample0 = 0.5 * (
                this.Texture.Sample(this.Uv + blurDir * (1.0/3.0 - 0.5)).XYZ +
                this.Texture.Sample(this.Uv + blurDir * (2.0/3.0 - 0.5)).XYZ);
    var sample1 = sample0 * 0.5 + 0.25 * (
                this.Texture.Sample(this.Uv + blurDir * (0.0/3.0 - 0.5)).XYZ +
                this.Texture.Sample(this.Uv + blurDir * (3.0/3.0 - 0.5)).XYZ);
    
    var luma1 = Math.Dot(sample1, this.Luma);
    
    // Min and Max luminance values
    var lumaMin = Math.Min(lumaM, Math.Min(Math.Min(lumaNW, lumaNE), Math.Min(lumaSW, lumaSE)));
    var lumaMax = Math.Max(lumaM, Math.Max(Math.Max(lumaNW, lumaNE), Math.Max(lumaSW, lumaSE)));
    
    // If it's outside the luminance range, use the first sample
    if((luma1 < lumaMin) || (luma1 > lumaMax))
    {
        this.Target0.XYZ = sample0;
    }
    else
    {
        this.Target0.XYZ = sample1;
    }
    
    this.Target0.W = 1.0;
    
    //var textureSize = this.Texture.SampleSize(0);
    //var pixelStep = Real2(1.0) / textureSize;
    //
    //var output = Real4(0.0);
    //for (var y = -3; y <= 3; ++y)
    //{
    //  for (var x = -3; x <= 3; ++x)
    //  {
    //    var uv = this.Uv + Real2(x, y) * pixelStep;
    //    output += this.Texture.Sample(uv);
    //  }
    //}
    //output /= 49.0;
    //
    //this.Target0 = this.Texture.Sample(this.Uv);
  }
}

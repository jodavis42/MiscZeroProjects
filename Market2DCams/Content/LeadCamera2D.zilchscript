////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 DigiPen USA Corporation, All Rights Reserved
// Author: Arend Danielek
// Last updated by: Joshua Davis
// Last update: 7/24/2017
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// This camera uses the last known target position, and the current position
// to create a direction vector that is used for leading the targets movements.
class LeadCamera2D : ZilchComponent
{
  [Dependency] var Transform : Transform;
  
  [Dependency] var Camera : Camera;
  
  // The object to be tracked
  [Property] var TargetCogPath : CogPath = CogPath();
  
  // How far the camera should lead the target object
  [Property] var CameraLeadMagnitude : Real = 5.0;
  
  // How quickly to interpolate to the target position
  [Property] var InterpolationSpeed : Real = 5.0;
  
  // Cached position of the target object last frame
  var LastFrameTargetPosition : Real3;

  function Initialize(init : CogInitializer)
  {
    // Confirm the target exists
    var targetCog = this.TargetCogPath.Cog;
    if(targetCog == null)
      throw new Exception("Camera has no target.");
    
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }
  
  function OnLogicUpdate(event : UpdateEvent)
  {
    var targetCog = this.TargetCogPath.Cog;
    if(targetCog == null)
      return;
      
    // Get the target object's position and the camera's position
    var targetObjPos = targetCog.Transform.WorldTranslation;
    var cameraPos = this.Transform.WorldTranslation;
    
    // Compute the normalized direction to offset the camera's position by
    var offsetDir = Math.Normalize(targetObjPos - this.LastFrameTargetPosition);
    // Compute the target position of the caemra from the object's current position and the offset direction
    var targetPosition = targetObjPos + offsetDir * this.CameraLeadMagnitude;
    // Keep the camera on the same z-plane
    targetPosition.Z = cameraPos.Z;
    
    // Smoothly interpolate from the camera's current position to the target position
    cameraPos = Math.Lerp(cameraPos, targetPosition, event.Dt * this.InterpolationSpeed);
    this.Transform.WorldTranslation = cameraPos;
    
    // Cache the target object's position
    this.LastFrameTargetPosition = targetObjPos;
  }
}

// Exception in destructor. Figure out later
//class StreamScope
//{
//  var Stream : UnitTestStreamWriter = null;
//  var Test : Real;
//  
//  constructor(stream : UnitTestStreamWriter)
//  {
//    this.Stream = stream;
//    this.Stream.BeginScope();
//  }
//  
//  destructor()
//  {
//    
//    if(this != null && this.Stream != null)
//      this.Stream.EndScope();
//  }
//}

class CheckedWriter[Type]
{
  [Static]
  function WriteToStream(object : Type, stream : UnitTestStreamWriter)
  {
    if(object == null)
      return;
    object.WriteToStream(stream);
  }
}

class UnitTestStreamWriter : IStream
{
  var Indentation : Integer = 0;
  var IndentationString : String = "";
  
  [Virtual] function WriteVirtual(message : String)
  {
  }
  
  [Virtual] function WriteLineVirtual(message : String)
  {
  }
  
  function Write(data : any)                      { this.WriteVirtual("`data`"); }
  function Write(prop : Property[Boolean])        { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Boolean2])       { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Boolean3])       { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Boolean4])       { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Integer])        { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Integer2])       { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Integer3])       { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Integer4])       { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Real])           { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Real2])          { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Real3])          { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Real4])          { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Real3x3])        { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Quaternion])     { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[Enum])           { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function Write(prop : Property[String])         { this.WriteVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(data : any)                  { this.WriteLineVirtual("`data`"); }
  function WriteLine(prop : Property[Boolean])    { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Boolean2])   { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Boolean3])   { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Boolean4])   { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Integer])    { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Integer2])   { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Integer3])   { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Integer4])   { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Real])       { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Real2])      { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Real3])      { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Real4])      { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Real3x3])    { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Quaternion]) { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[Enum])       { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  function WriteLine(prop : Property[String])     { this.WriteLineVirtual("`prop.Property.Name`: `prop.Get()`"); }
  
  [Override]
  function WriteText(text : String) : Integer
  {
    this.Write(text);
    return 1;
  }
  
  function GetCogName(cog : Cog) : String
  {
    if(cog == null)
      return "null";
    return cog.Name;
  }
  function GetComponentOwnerName(component : Component) : String
  {
    if(component == null)
      return "null";
    return component.Owner.Name;
  }
  function Write(prop : Property[Cog])            { this.WriteVirtual("`prop.Property.Name`: `this.GetCogName(prop.Get())`"); }
  function WriteLine(prop : Property[Cog])        { this.WriteLineVirtual("`prop.Property.Name`: `this.GetCogName(prop.Get())`"); }
  
  function BeginScope()
  {
    ++this.Indentation;
    this.UpdateIndentationString();
  }
  
  function EndScope()
  {
    --this.Indentation;
    this.UpdateIndentationString();
  }
  
  function UpdateIndentationString()
  {
    var builder = StringBuilder();
    
    for(var i = 0; i < this.Indentation; ++i)
      builder.Write("  ");
    this.IndentationString = builder.ToString();
  }
}

class ConsoleUnitTestStreamWriter : UnitTestStreamWriter
{
  [Override]
  function WriteVirtual(message : String)
  {
    Console.Write("`this.IndentationString``message`");
  }
  
  [Override]
  function WriteLineVirtual(message : String)
  {
    Console.WriteLine("`this.IndentationString``message`");
  }
}

class StringUnitTestStreamWriter : UnitTestStreamWriter
{
  var Builder : StringBuilder = StringBuilder();
  
  [Override]
  function WriteVirtual(message : String)
  {
    this.Builder.Write("`this.IndentationString``message`");
  }
  
  [Override]
  function WriteLineVirtual(message : String)
  {
    this.Builder.WriteLine("`this.IndentationString``message`");
  }
  
  function ToString() : String
  {
    return this.Builder.ToString();
  }
}

class FileUnitTestStreamWriter : UnitTestStreamWriter
{
  var FileStream : FileStream;
  
  constructor(path : String) : base()
  {
    this.FileStream = FileStream(path, FileMode.Write);
  }
  
  [Override]
  function WriteVirtual(message : String)
  {
    this.FileStream.WriteText("`this.IndentationString``message`");
  }
  
  [Override]
  function WriteLineVirtual(message : String)
  {
    this.FileStream.WriteText("`this.IndentationString``message`\n");
  }
}